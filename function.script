custom_score_easy <- function (my.inds, cols = 1, n.inds = NULL, panel = NULL, shift = 0.8, 
          ladder, channel.ladder = NULL, ploidy = 2, left.cond = c(0.6, 
                                                                   3), right.cond = 0.35, warn = FALSE, window = 0.5, init.thresh = 200, 
          ladd.init.thresh = 200, method = "iter2", env = parent.frame(), 
          plotting = TRUE, electro = FALSE, pref = 3) 
{
  oldw <- getOption("warn")
  options(warn = -1)
  ci.upp = 1.96
  ci.low = 1.96
  dev = 50
  thresh = NULL
  if (length(n.inds) > length(my.inds)) {
    print(paste("Hey! you are trying to examine more individuals than the ones you actually read? You selected in 'n.inds' argument", 
                length(n.inds), "individuals but you only provided", 
                length(my.inds), " individuals. Please select a number of individuals smaller or same size than the ones contained in 'my.inds' argument"))
    stop
  }
  else {
    cat(paste("\n1) You have used a shift of", shift, "base pairs. All peaks at that distance from the tallest peak will be ignored and be considered noise. \n2) In addition the window used is", 
              window, ". Which means that all peaks closer by that distance to panel peaks will be accounted as peaks. \n3) Remember using the get.scores() function to extract the results from this output. \n\n"))
  }
  if (method == "ci") {
    print(paste("Please make sure you have used the same 'dev' value you found convenient for your ladder detection or probably your call will not match"))
  }
  if (is.null(channel.ladder)) {
    channel.ladder <- dim(my.inds[[1]])[2]
  }
  else {
    channel.ladder <- channel.ladder
  }
  if (dim(my.inds[[1]])[2] < channel.ladder) {
    print(paste("ERROR MY FRIEND!! you have indicated an argument channel.ladder=5, but your data contains less channels/colors"))
    stop
  }
  if (is.null(n.inds)) {
    n.inds <- c(1:length(my.inds))
  }
  else {
    n.inds <- n.inds
  }
  if (is.null(thresh)) {
    thresh <- rep(list(c(1, 1, 1, 1, 1)), length(my.inds))
  }
  else {
    thresh <- thresh
  }
  count <- 0
  tot <- length(n.inds)
  pb <- txtProgressBar(style = 3)
  setTxtProgressBar(pb, 0)
  my.inds2 <- list(NA)
  thresh2 <- list(NA)
  for (i in 1:length(n.inds)) {
    count <- count + 1
    v1 <- n.inds[i]
    my.inds2[[i]] <- my.inds[[v1]]
    names(my.inds2)[i] <- names(my.inds)[i]
    setTxtProgressBar(pb, (count/tot) * 0.25)
  }
  ncfp <- c("COLOR 1", "COLOR 2", "COLOR 3", "COLOR 4", "COLOR 5", 
            "COLOR 6")
  cfp <- c("cornflowerblue", "chartreuse4", "darkorange2", "red", 
           "orange", "purple")
  col.list <- list(NA)
  att1 <- numeric()
  list.data <- list(NA)
  if (exists("list.data.covarrubias")) {
    list.data <- env$list.data.covarrubias
  }
  else {
    list.ladders <- lapply(my.inds2, function(x) {
      y <- x[, channel.ladder]
      return(y)
    })
    list.data <- lapply(list.ladders, find.ladder, ladder = ladder, 
                        ci.upp = ci.upp, ci.low = ci.low, draw = F, dev = dev, 
                        warn = warn, method = method, init.thresh = ladd.init.thresh)
  }
  list.models <- lapply(list.data, function(da) {
    y <- da[[3]]
    x <- da[[1]]
    mod <- lm(y ~ I(x) + I(x^2) + I(x^3) + I(x^4) + I(x^5), 
              data = da)
    return(mod)
  })
  list.models.inv <- lapply(list.data, function(da) {
    x <- da[[3]]
    y <- da[[1]]
    mod <- lm(y ~ x, data = da)
    return(mod)
  })
  xx <- lapply(my.inds2, function(x, cols) {
    1:length(x[, cols])
  }, cols = cols)
  newxx <- numeric()
  newyy <- numeric()
  new.whole.data <- list(NA)
  for (h in 1:length(xx)) {
    h1 <- n.inds[h]
 


fragment_sizes <- function(input_data, panel, colour, signal_threshold, distance_between_peaks) {
  custom_score_easy(my.inds=input_data, cols = colour, n.inds = NULL, panel=panel, 
             shift=0.8, ladder=LIZ_500_no_35, channel.ladder=NULL, ploidy=2, 
             left.cond=c(0.6,distance_between_peaks), right.cond=0.25, 
             warn=FALSE, window=1.0, init.thresh=signal_threshold, ladd.init.thresh=200, 
             method="iter2", env = parent.frame(), plotting=TRUE, electro=FALSE, pref=1)
}
